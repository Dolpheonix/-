1. OOP
  1) 추상화 : 집단의 공통적인 속성과 기능을 묶어 정의함 (class, interface)
  2) 상속 : 기존의 클래스를 재활용해 하위 클래스를 구현할 수 있음 (코드 재사용성을 높임)
  3) 다형성 : 어떤 객체의 속성이나 기능이 상황에 따라 여러 형태로 변할 수 있음 (오버라이딩/오버로딩)
  4) 캡슐화 : 클래스 내의 연관된 속성과 함수를 묶어 하나의 캡슐로 만듦 -> 외부로부터의 접근을 최소화

2. SOLID 원칙
  1) Single Responsibility : 한 클래스(모듈)이 변경되는 이유가 하나여야 함 --> 여러 변경점을 갖는 코드들은 분리함
  2) 개방-폐쇄 원칙 : 확장에는 Open, 변경에는 Closed -> 새로운 기능을 추가할 때에는 변경 없이 새 코드만 작성하면 되게끔
  3) 인터페이스 분리 원칙 : 특정 클라이언트가 원하는 기능만을 모은 인터페이스를 제공할 것
  4) 리스코프 치환 원칙 : 하위 클래스는 상위 클래스를 완벽하게 대체할 수 있어야 함
  5) 의존 역전 원칙 : 저수준 모듈에 고수준 모듈이 의존해서는 안됨 --> 추상적인 구현에만 의존하고, 구체적인 저수준 구현은 보이지 않아야 함

3. RAII 패턴
  1) 사용 SCOPE가 끝난 메모리는 그때그때 해제해주어, 의도치않은 memory leak을 방지한다.
